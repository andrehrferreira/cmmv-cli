export default{mounted(){this.addContracts({index:{ws:{index:0,types:{WsCall:0}},wserror:{index:1,types:{WsError:0}}},contracts:{ws:{options:{syntax:"proto3"},nested:{ws:{nested:{WsCall:{fields:{contract:{type:"int32",id:1},message:{type:"int32",id:2},data:{type:"bytes",id:3}}}}}}},wserror:{options:{syntax:"proto3"},nested:{wserror:{nested:{WsError:{fields:{message:{type:"string",id:1},code:{type:"int32",id:2},context:{type:"string",id:3}}}}}}}}}),this.connectWebSocket()},data(){return{socket:null,contractIndex:0,contracts:{},binds:{}}},methods:{connectWebSocket(){var t=window.location.href.replace("https","wss").replace("http","ws");this.socket=new WebSocket(t),this.socket.binaryType="arraybuffer",this.socket.addEventListener("message",this.parseMessage),this.socket.addEventListener("open",()=>{}),this.socket.addEventListener("close",()=>{console.warn("WebSocket disconnected. Attempting to reconnect in 10 seconds..."),setTimeout(()=>{this.connectWebSocket()},this.reconnectInterval)}),this.socket.addEventListener("error",t=>{console.error("WebSocket error:",t)})},addContracts(t){try{for(var e in this.contractIndex=t.index,t.contracts){var s;t.contracts.hasOwnProperty(e)&&(s=protobuf.Root.fromJSON(t.contracts[e]),this.contracts[e]=s)}}catch(t){console.error("Error loading contracts:",t)}},getContract(t){return this.contracts[t]},parseMessage(o){try{var t=o.data instanceof ArrayBuffer?new Uint8Array(o.data):o.data;let s=this.contracts.ws.lookupType("WsCall").decode(t),n=Object.keys(this.contractIndex).find(t=>this.contractIndex[t].index===s.contract);var r=Object.keys(this.contractIndex[n].types).find(t=>this.contractIndex[n].types[t]===s.message);if(n&&r){let e=this.getContract(n).lookupType(r).decode(s.data);this.binds[n]&&this.binds[n][r]&&this.binds[n][r].forEach(t=>t.apply(this.contextApp,[e,o.socket])),"function"==typeof this[r]&&this[r].call(this,e,o.socket)}else console.error("Unknown contract or message type:",s.contract,s.message)}catch(t){console.error(t)}},pack(t,e,s){try{var n,o,r,c,a;return this.contracts[t]&&this.contractIndex[t]?(o=(n=this.contractIndex[t])?.types[e],c=(r=this.contracts[t]?.lookupType(e))&&s?r.encode(s).finish():null,(a=(this.contracts.ws?.lookupType("WsCall"))?.encode({contract:n?.index,message:o,data:c&&c instanceof Uint8Array?c:new Uint8Array}).finish())?new Uint8Array(a):null):(console.error(`Not found in contract list ${t}.`+e),null)}catch(t){console.error(t)}},send(t){this.socket&&this.socket.readyState===WebSocket.OPEN?this.socket.send(t):console.warn("WebSocket is not open. Unable to send message.")}}};